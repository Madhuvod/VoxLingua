{
  "original_file": "Grind Leetcode or Build Projects？.wav",
  "source_language": "en",
  "target_language": "es",
  "original_text": " Build projects, then leap code. But if you have experience, just grind leap code and system design, you can end the video right now. Breaking into software is rough. Applying to jobs can feel like screaming into a void. But fundamentally, if you have no experience, projects and open source contributions are the closest thing to shipping real software. Projects help fill your resume with relevant content and teach you a depth of knowledge. Remember, your projects don't have to be original. They can be a clone of a popular website or game. I recommend having at least three unit tested projects that anyone can access, maybe a web app on AWS or Versel, or a mobile app on the Android app store. Anywhere someone can see and use your project. Grind leap code really is in a project. And you can always incorporate algorithms into your projects. But you can't do it the other way around. In many countries, they don't actually ask leap code style questions and could ask you to do a take home assignment or ask you questions regarding a framework or technology. In which case, projects are a clear win that being said, leap code is important. There's a reason all the top companies use it to filter candidates. And that's because it tests one of the core components of computer science algorithms and data structures. My personal roadmap was to learn Python for its easy syntax, then learn algorithms and data structures. There are so many awesome free resources online. Grind leap code efficiently is also a well-documented journey. I highly recommend checking out Neatcode150 and Blind 75. Projects or work experience get you to the door. But fundamentally, in many cases, leap code gets you through the door. Thank you for your time. I am Big Box.",
  "translated_text": "Construye proyectos, luego salta código. Pero si tienes experiencia, simplemente muele código bisiesto y diseño de sistema, puedes terminar el video ahora mismo. Entrar en software es difícil. Aplicar a trabajos puede tener ganas de gritar en un vacío. Pero fundamentalmente, si no tienes experiencia, los proyectos y las contribuciones de código abierto son lo más cercano al envío de software real. Los proyectos ayudan a llenar tu currículum con contenido relevante y te enseñan una profundidad de conocimiento. Recuerda, tus proyectos no tienen que ser originales. Pueden ser un clon de un sitio web o un juego popular. Te recomiendo tener al menos tres proyectos probados por unidad a los que cualquiera pueda acceder, tal vez una aplicación web en AWS o Versel, o una aplicación móvil en la tienda de aplicaciones para Android. En cualquier lugar alguien puede ver y usar tu proyecto. Gracias a que el código bisiesto en Grind realmente está en un proyecto. Y siempre puedes incorporar algoritmos en tus proyectos. Pero no puedes hacerlo de otra manera. En muchos países, no se pueden hacer preguntas sobre el código de la información."
}